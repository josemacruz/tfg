{"ast":null,"code":"import { takeEvery, call, put, all, fork } from 'redux-saga/effects';\nimport * as Api from './../../api/devices';\nimport * as TYPES from './types';\nexport function* getDevicesThroughApi() {\n  try {\n    const response = yield call(Api.readDevices);\n\n    if (response.status === 200) {\n      const devices = response.data;\n      yield put({\n        type: TYPES.GET_DEVICES_SUCCESS,\n        payload: devices\n      });\n    } else {\n      yield put({\n        type: TYPES.GET_DEVICES_ERROR,\n        payload: response\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: TYPES.GET_DEVICES_ERROR,\n      payload: error\n    });\n  }\n} // Watcher looking for GET_DEVICES_REQUEST\n\nfunction* watcherGetDevices() {\n  yield takeEvery('GET_DEVICES_REQUEST', getDevicesThroughApi);\n} // Export all together\n\n\nexport default function* rootSaga() {\n  yield all([fork(watcherGetDevices)]);\n}","map":{"version":3,"sources":["/home/josema/tfg/client/src/services/redux/devices/saga.jsx"],"names":["takeEvery","call","put","all","fork","Api","TYPES","getDevicesThroughApi","response","readDevices","status","devices","data","type","GET_DEVICES_SUCCESS","payload","GET_DEVICES_ERROR","error","watcherGetDevices","rootSaga"],"mappings":"AAAA,SACEA,SADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,GAJF,EAKEC,IALF,QAMO,oBANP;AAOA,OAAO,KAAKC,GAAZ,MAAqB,qBAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACvC,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAC1BI,GAAG,CAACI,WADsB,CAA3B;;AAGA,QAAKD,QAAQ,CAACE,MAAT,KAAoB,GAAzB,EAA8B;AAC7B,YAAMC,OAAO,GAAGH,QAAQ,CAACI,IAAzB;AACA,YAAMV,GAAG,CAAC;AACTW,QAAAA,IAAI,EAAEP,KAAK,CAACQ,mBADH;AAETC,QAAAA,OAAO,EAAEJ;AAFA,OAAD,CAAT;AAIA,KAND,MAMO;AACN,YAAMT,GAAG,CAAC;AACTW,QAAAA,IAAI,EAAEP,KAAK,CAACU,iBADH;AAETD,QAAAA,OAAO,EAAEP;AAFA,OAAD,CAAT;AAIA;AACD,GAhBD,CAgBE,OAAOS,KAAP,EAAc;AACf,UAAMf,GAAG,CAAC;AACTW,MAAAA,IAAI,EAAEP,KAAK,CAACU,iBADH;AAETD,MAAAA,OAAO,EAAEE;AAFA,KAAD,CAAT;AAIA;AACD,C,CAED;;AACA,UAAUC,iBAAV,GAA8B;AAC5B,QAAMlB,SAAS,CAAC,qBAAD,EAAwBO,oBAAxB,CAAf;AACD,C,CAED;;;AACA,eAAe,UAAUY,QAAV,GAAqB;AAClC,QAAMhB,GAAG,CAAC,CACRC,IAAI,CAACc,iBAAD,CADI,CAAD,CAAT;AAGD","sourcesContent":["import {\n  takeEvery,\n  call,\n  put,\n  all,\n  fork\n} from 'redux-saga/effects';\nimport * as Api from './../../api/devices';\nimport * as TYPES from './types';\n\nexport function* getDevicesThroughApi() {\n\ttry {\n\t\tconst response = yield call(\n\t\t\tApi.readDevices,\n\t\t);\n\t\tif ( response.status === 200) {\n\t\t\tconst devices = response.data;\n\t\t\tyield put({\n\t\t\t\ttype: TYPES.GET_DEVICES_SUCCESS,\n\t\t\t\tpayload: devices,\n\t\t\t})\n\t\t} else {\n\t\t\tyield put({\n\t\t\t\ttype: TYPES.GET_DEVICES_ERROR,\n\t\t\t\tpayload: response,\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: TYPES.GET_DEVICES_ERROR,\n\t\t\tpayload: error,\n\t\t});\n\t}\n}\n\n// Watcher looking for GET_DEVICES_REQUEST\nfunction* watcherGetDevices() {\n  yield takeEvery('GET_DEVICES_REQUEST', getDevicesThroughApi);\n}\n\n// Export all together\nexport default function* rootSaga() {\n  yield all([\n    fork(watcherGetDevices),\n  ]);\n}"]},"metadata":{},"sourceType":"module"}