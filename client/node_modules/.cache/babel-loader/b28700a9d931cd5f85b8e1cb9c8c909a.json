{"ast":null,"code":"import * as TYPES from './types';\nimport { Map, List } from 'immutable';\n/** Initial State of Devices */\n\nconst initialState = Map({\n  list: List([])\n});\n/** DEVICES REDUCER*/\n\nexport default ((state = initialState, {\n  type,\n  payload\n}) => {\n  let aux;\n  /** Cases */\n\n  switch (type) {\n    /** GET ALL DEVICES FROM DB TO STATE */\n    case TYPES.GET_DEVICES_SUCCESS:\n      {\n        const devicesId = payload.map(o => o.id);\n        const devices = state.get('list').toJS().filter(o => !devicesId.includes(o.id));\n        aux = state.set('list', List([...devices, ...payload]));\n        return aux;\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/josema/tfg/client/src/services/redux/devices/reducer.jsx"],"names":["TYPES","Map","List","initialState","list","state","type","payload","aux","GET_DEVICES_SUCCESS","devicesId","map","o","id","devices","get","toJS","filter","includes","set"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,WAA1B;AAEA;;AACA,MAAMC,YAAY,GAAGF,GAAG,CAAC;AACvBG,EAAAA,IAAI,EAAEF,IAAI,CAAC,EAAD;AADa,CAAD,CAAxB;AAIA;;AACA,gBAAe,CAACG,KAAK,GAAGF,YAAT,EAAuB;AAAEG,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAvB,KAA6C;AAC1D,MAAIC,GAAJ;AAEA;;AACA,UAAQF,IAAR;AAEE;AACA,SAAKN,KAAK,CAACS,mBAAX;AAAgC;AAC9B,cAAMC,SAAS,GAAGH,OAAO,CAACI,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACC,EAAnB,CAAlB;AACA,cAAMC,OAAO,GAAGT,KAAK,CAClBU,GADa,CACT,MADS,EAEbC,IAFa,GAGbC,MAHa,CAGNL,CAAC,IAAI,CAACF,SAAS,CAACQ,QAAV,CAAmBN,CAAC,CAACC,EAArB,CAHA,CAAhB;AAIAL,QAAAA,GAAG,GAAGH,KAAK,CAACc,GAAN,CAAU,MAAV,EAAkBjB,IAAI,CAAC,CAAC,GAAGY,OAAJ,EAAa,GAAGP,OAAhB,CAAD,CAAtB,CAAN;AACA,eAAOC,GAAP;AACH;;AAEC;AACE,aAAOH,KAAP;AAdJ;AAgBD,CApBD","sourcesContent":["import * as TYPES from './types';\nimport { Map, List } from 'immutable';\n\n/** Initial State of Devices */\nconst initialState = Map({\n  list: List([]),\n});\n\n/** DEVICES REDUCER*/\nexport default (state = initialState, { type, payload }) => {\n  let aux;\n\n  /** Cases */\n  switch (type) {\n\n    /** GET ALL DEVICES FROM DB TO STATE */\n    case TYPES.GET_DEVICES_SUCCESS: {\n      const devicesId = payload.map(o => o.id);\n      const devices = state\n        .get('list')\n        .toJS()\n        .filter(o => !devicesId.includes(o.id));\n      aux = state.set('list', List([...devices, ...payload]));\n      return aux;\n\t\t}\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}